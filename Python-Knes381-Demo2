{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3e8df237",
   "metadata": {
    "papermill": {
     "duration": 0.006909,
     "end_time": "2025-03-25T19:24:29.594576",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.587667",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<IMG SRC=\"https://ucalgary.ca/themes/ucalgary/ucws_theme/images/UCalgary.svg\" WIDTH=250 ALIGN=\"right\">    </IMG>\n",
    "## Plotting $\\dot{V}O_2$ continued...\n",
    "\n",
    "#### Developed by Dr. John Holash at the University of Calgary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bb134766",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:29.608364Z",
     "iopub.status.busy": "2025-03-25T19:24:29.607817Z",
     "iopub.status.idle": "2025-03-25T19:24:29.627079Z",
     "shell.execute_reply": "2025-03-25T19:24:29.625847Z"
    },
    "papermill": {
     "duration": 0.029304,
     "end_time": "2025-03-25T19:24:29.629744",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.600440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/demo-knes381/subject_1321.xlsx\n",
      "/kaggle/input/demo-knes381/subject_1432.xlsx\n",
      "/kaggle/input/demo-knes381/subject_1321.csv\n",
      "/kaggle/input/demo-knes381/subject_1232.csv\n",
      "/kaggle/input/demo-knes381/VO2_CSV.csv\n",
      "/kaggle/input/demo-knes381/subject_1232.xlsx\n",
      "/kaggle/input/demo-knes381/subject_1432.csv\n",
      "/kaggle/input/demo-knes381/subject_1523.csv\n",
      "/kaggle/input/demo-knes381/VO2_excel.xlsx\n",
      "/kaggle/input/demo-knes381/subject_1523.xlsx\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "23540a57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:29.643875Z",
     "iopub.status.busy": "2025-03-25T19:24:29.643002Z",
     "iopub.status.idle": "2025-03-25T19:24:29.660569Z",
     "shell.execute_reply": "2025-03-25T19:24:29.659214Z"
    },
    "papermill": {
     "duration": 0.027712,
     "end_time": "2025-03-25T19:24:29.663392",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.635680",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('../input/demo-knes381/subject_1321.csv', header=[0], skiprows=[1,2,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fa564426",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:29.677452Z",
     "iopub.status.busy": "2025-03-25T19:24:29.676562Z",
     "iopub.status.idle": "2025-03-25T19:24:29.705410Z",
     "shell.execute_reply": "2025-03-25T19:24:29.704043Z"
    },
    "papermill": {
     "duration": 0.038778,
     "end_time": "2025-03-25T19:24:29.708097",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.669319",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 54 entries, 0 to 53\n",
      "Data columns (total 17 columns):\n",
      " #   Column   Non-Null Count  Dtype  \n",
      "---  ------   --------------  -----  \n",
      " 0   TIME     54 non-null     float64\n",
      " 1   VO2      54 non-null     float64\n",
      " 2   VO2/kg   54 non-null     float64\n",
      " 3   METS     54 non-null     float64\n",
      " 4   VCO2     54 non-null     float64\n",
      " 5   VE       54 non-null     float64\n",
      " 6   RER      54 non-null     float64\n",
      " 7   RR       54 non-null     float64\n",
      " 8   Vt       54 non-null     float64\n",
      " 9   FEO2     54 non-null     float64\n",
      " 10  FECO2    54 non-null     float64\n",
      " 11  HR       54 non-null     float64\n",
      " 12  VE/      54 non-null     float64\n",
      " 13  VE/.1    54 non-null     float64\n",
      " 14  PetCO2   54 non-null     float64\n",
      " 15  Power    51 non-null     float64\n",
      " 16  Lactate  8 non-null      object \n",
      "dtypes: float64(16), object(1)\n",
      "memory usage: 7.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35369a38",
   "metadata": {
    "papermill": {
     "duration": 0.005516,
     "end_time": "2025-03-25T19:24:29.719584",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.714068",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Rename some of the columns so they make sense\n",
    "you can rename them with the value TIME -> Time(min) but don't leave spaces if you want to auto-complete names..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "57b8f52d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:29.733341Z",
     "iopub.status.busy": "2025-03-25T19:24:29.732898Z",
     "iopub.status.idle": "2025-03-25T19:24:29.739420Z",
     "shell.execute_reply": "2025-03-25T19:24:29.738144Z"
    },
    "papermill": {
     "duration": 0.016585,
     "end_time": "2025-03-25T19:24:29.741977",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.725392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.rename(columns={'VE/': 'VE/VO2','VE/.1': 'VE/VCO2'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9c9415f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:29.756215Z",
     "iopub.status.busy": "2025-03-25T19:24:29.755314Z",
     "iopub.status.idle": "2025-03-25T19:24:29.770628Z",
     "shell.execute_reply": "2025-03-25T19:24:29.769281Z"
    },
    "papermill": {
     "duration": 0.025148,
     "end_time": "2025-03-25T19:24:29.773147",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.747999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 54 entries, 0 to 53\n",
      "Data columns (total 17 columns):\n",
      " #   Column   Non-Null Count  Dtype  \n",
      "---  ------   --------------  -----  \n",
      " 0   TIME     54 non-null     float64\n",
      " 1   VO2      54 non-null     float64\n",
      " 2   VO2/kg   54 non-null     float64\n",
      " 3   METS     54 non-null     float64\n",
      " 4   VCO2     54 non-null     float64\n",
      " 5   VE       54 non-null     float64\n",
      " 6   RER      54 non-null     float64\n",
      " 7   RR       54 non-null     float64\n",
      " 8   Vt       54 non-null     float64\n",
      " 9   FEO2     54 non-null     float64\n",
      " 10  FECO2    54 non-null     float64\n",
      " 11  HR       54 non-null     float64\n",
      " 12  VE/VO2   54 non-null     float64\n",
      " 13  VE/VCO2  54 non-null     float64\n",
      " 14  PetCO2   54 non-null     float64\n",
      " 15  Power    51 non-null     float64\n",
      " 16  Lactate  8 non-null      object \n",
      "dtypes: float64(16), object(1)\n",
      "memory usage: 7.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c85c3fc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:29.787049Z",
     "iopub.status.busy": "2025-03-25T19:24:29.786683Z",
     "iopub.status.idle": "2025-03-25T19:24:29.791736Z",
     "shell.execute_reply": "2025-03-25T19:24:29.790507Z"
    },
    "papermill": {
     "duration": 0.014849,
     "end_time": "2025-03-25T19:24:29.794096",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.779247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3e632b1",
   "metadata": {
    "papermill": {
     "duration": 0.005921,
     "end_time": "2025-03-25T19:24:29.805977",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.800056",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Create our big plot...\n",
    "1st define our variables x,y,& y1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "07d35f6a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:29.819751Z",
     "iopub.status.busy": "2025-03-25T19:24:29.819347Z",
     "iopub.status.idle": "2025-03-25T19:24:29.825081Z",
     "shell.execute_reply": "2025-03-25T19:24:29.823638Z"
    },
    "papermill": {
     "duration": 0.01559,
     "end_time": "2025-03-25T19:24:29.827584",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.811994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# simplify our terms to reduce future typing...\n",
    "x = df['VO2']\n",
    "y = df['FECO2']\n",
    "y1 = df['VCO2']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c1991b0",
   "metadata": {
    "papermill": {
     "duration": 0.006869,
     "end_time": "2025-03-25T19:24:29.840419",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.833550",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Find the position where max occurs, on each axes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8b77d697",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:29.854899Z",
     "iopub.status.busy": "2025-03-25T19:24:29.853986Z",
     "iopub.status.idle": "2025-03-25T19:24:29.859999Z",
     "shell.execute_reply": "2025-03-25T19:24:29.858604Z"
    },
    "papermill": {
     "duration": 0.016077,
     "end_time": "2025-03-25T19:24:29.862459",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.846382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Find VO2 max value \n",
    "xmax = max(x)\n",
    "\n",
    "# find the x position of the ymax value or where ymax occurs on the x axis\n",
    "ymax = y[x.argmax()]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5551e198",
   "metadata": {
    "papermill": {
     "duration": 0.005652,
     "end_time": "2025-03-25T19:24:29.874107",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.868455",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Now we can discover what these values are"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "83139ef3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:29.887624Z",
     "iopub.status.busy": "2025-03-25T19:24:29.887216Z",
     "iopub.status.idle": "2025-03-25T19:24:29.892903Z",
     "shell.execute_reply": "2025-03-25T19:24:29.891641Z"
    },
    "papermill": {
     "duration": 0.0157,
     "end_time": "2025-03-25T19:24:29.895652",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.879952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.166035\n",
      "2.778085\n"
     ]
    }
   ],
   "source": [
    "print(ymax)\n",
    "print(xmax)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdc5ac00",
   "metadata": {
    "papermill": {
     "duration": 0.005848,
     "end_time": "2025-03-25T19:24:29.907432",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.901584",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Create the frame and the axis that we will plot in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "56a2442d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:29.922931Z",
     "iopub.status.busy": "2025-03-25T19:24:29.922034Z",
     "iopub.status.idle": "2025-03-25T19:24:30.219828Z",
     "shell.execute_reply": "2025-03-25T19:24:30.218423Z"
    },
    "papermill": {
     "duration": 0.309405,
     "end_time": "2025-03-25T19:24:30.222771",
     "exception": false,
     "start_time": "2025-03-25T19:24:29.913366",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# break up the figure and axis definitions of a plot \n",
    "# so it is easier to assign values\n",
    "\n",
    "fig, ax = plt.subplots(2, 1, sharex=True)\n",
    "\n",
    "# create 2 subplots share x axis, in the next line we will remove \n",
    "# spaces between the horizontal axis, play with this value to see what happens the value can be 0.01 for example\n",
    "\n",
    "fig.subplots_adjust(hspace=0.1\n",
    "                   )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a447921d",
   "metadata": {
    "papermill": {
     "duration": 0.007326,
     "end_time": "2025-03-25T19:24:30.236747",
     "exception": false,
     "start_time": "2025-03-25T19:24:30.229421",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Now that we have that axis value specified, annotate the position and marker for VO2 max"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "967ee57e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:30.252680Z",
     "iopub.status.busy": "2025-03-25T19:24:30.252144Z",
     "iopub.status.idle": "2025-03-25T19:24:30.261936Z",
     "shell.execute_reply": "2025-03-25T19:24:30.260737Z"
    },
    "papermill": {
     "duration": 0.020836,
     "end_time": "2025-03-25T19:24:30.264671",
     "exception": false,
     "start_time": "2025-03-25T19:24:30.243835",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(3.278085, 5.166035, '$\\\\dot VO_2max$ =(2.78) L/min')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ax[0].annotate('$\\dot VO_2max$ =({}) L/min'.format(round(xmax, 2)), \n",
    "               xy=(xmax, ymax), xytext=(xmax+.5, ymax+ 1),\n",
    "               arrowprops=dict(facecolor='magenta', shrink= 0.05),\n",
    "                )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e74eb82",
   "metadata": {
    "papermill": {
     "duration": 0.006775,
     "end_time": "2025-03-25T19:24:30.278036",
     "exception": false,
     "start_time": "2025-03-25T19:24:30.271261",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### For the first plot ax[0] we create the lable and make it red\n",
    "Then we get rid of the right and top plot frame\n",
    "We set the y axis lab as \"L/min\" and tell it to print a legend"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7bc54ba7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:30.293366Z",
     "iopub.status.busy": "2025-03-25T19:24:30.292927Z",
     "iopub.status.idle": "2025-03-25T19:24:30.305263Z",
     "shell.execute_reply": "2025-03-25T19:24:30.304100Z"
    },
    "papermill": {
     "duration": 0.02277,
     "end_time": "2025-03-25T19:24:30.307750",
     "exception": false,
     "start_time": "2025-03-25T19:24:30.284980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x78bb1d98a150>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ax[0].plot(x, y,  label=('FECO2'), c='m' )\n",
    "ax[0].spines[['right', 'top']].set_visible(False)\n",
    "#note all these set features could be added in one line but reading it would be difficult\n",
    "#ax.set(title = ('$\\dot VO_2$'), label=('$\\dot VO_2$ L/min'))  \n",
    "ax[0].set(xlabel=('L/min'))\n",
    "ax[0].legend()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f86d7147",
   "metadata": {
    "papermill": {
     "duration": 0.006421,
     "end_time": "2025-03-25T19:24:30.320772",
     "exception": false,
     "start_time": "2025-03-25T19:24:30.314351",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Same thing for the second plot *note* we don't see the plot because we have not ploted the plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0ddd6192",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:30.336032Z",
     "iopub.status.busy": "2025-03-25T19:24:30.335626Z",
     "iopub.status.idle": "2025-03-25T19:24:30.347761Z",
     "shell.execute_reply": "2025-03-25T19:24:30.346536Z"
    },
    "papermill": {
     "duration": 0.022698,
     "end_time": "2025-03-25T19:24:30.350309",
     "exception": false,
     "start_time": "2025-03-25T19:24:30.327611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x78bb2c5f5ed0>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Second plot of values down from the top\n",
    "ax[1].plot(x, y1, label=('$\\dot VCO_2$'), c='c')\n",
    "ax[1].spines[['top', 'right']].set_visible(False)\n",
    "ax[1].set(ylabel=('L/min'))\n",
    "ax[1].legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad327370",
   "metadata": {
    "papermill": {
     "duration": 0.006483,
     "end_time": "2025-03-25T19:24:30.363462",
     "exception": false,
     "start_time": "2025-03-25T19:24:30.356979",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### We can now create a file with our first plot! We will save the plot first for reasons discussed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5e194e38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:30.378957Z",
     "iopub.status.busy": "2025-03-25T19:24:30.378190Z",
     "iopub.status.idle": "2025-03-25T19:24:31.035958Z",
     "shell.execute_reply": "2025-03-25T19:24:31.034664Z"
    },
    "papermill": {
     "duration": 0.668452,
     "end_time": "2025-03-25T19:24:31.038579",
     "exception": false,
     "start_time": "2025-03-25T19:24:30.370127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "fig.savefig(\"FECO2-VCO2-3.png\", dpi=300, bbox_inches = \"tight\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "870ec79c",
   "metadata": {
    "papermill": {
     "duration": 0.006442,
     "end_time": "2025-03-25T19:24:31.051581",
     "exception": false,
     "start_time": "2025-03-25T19:24:31.045139",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### As this is an interactive space we need to put all the code together for it to plot out interactively..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cd30ce7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:31.066687Z",
     "iopub.status.busy": "2025-03-25T19:24:31.066227Z",
     "iopub.status.idle": "2025-03-25T19:24:31.971140Z",
     "shell.execute_reply": "2025-03-25T19:24:31.969854Z"
    },
    "papermill": {
     "duration": 0.915674,
     "end_time": "2025-03-25T19:24:31.973825",
     "exception": false,
     "start_time": "2025-03-25T19:24:31.058151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# break up the figure and axis definitions of a plot \n",
    "# so it is easier to assign values\n",
    "fig, ax = plt.subplots(2, 1, sharex=True)  # Height increased from default\n",
    "# spaces between the horizontal axis, play with this value?\n",
    "fig.subplots_adjust(hspace=0)\n",
    "\n",
    "\n",
    "ax[0].annotate('$\\dot VO_2max$ =({}) L/min'.format(round(xmax, 2)), \n",
    "               xy=(xmax, ymax), xytext=(xmax+.5, ymax+ 1),\n",
    "               arrowprops=dict(facecolor='red', shrink= 0.05),\n",
    "                )\n",
    "\n",
    "ax[0].plot(x, y,  label=('FECO2'), c='r' )\n",
    "ax[0].spines[['right', 'top']].set_visible(False)\n",
    "#note all these set features could be added in one line but reading it would be difficult\n",
    "#ax.set(title = ('$\\dot VO_2$'), label=('$\\dot VO_2$ L/min'))  \n",
    "ax[0].set(ylabel=('%'))\n",
    "ax[0].legend()\n",
    "\n",
    "# Second plot of values down from the top\n",
    "ax[1].plot(x, y1, label=('$\\dot VCO_2$'), c='b')\n",
    "ax[1].spines[['top', 'right']].set_visible(False)\n",
    "ax[1].set(ylabel=('L/min'))\n",
    "ax[1].legend()\n",
    "\n",
    "#ax[0].set_ylim(min(y) - 1, max(y) + 1)  # Adjust as needed for your data\n",
    "#ax[1].set_ylim(min(y1) - 1, max(y1) + 1)  # Adjust as needed\n",
    "\n",
    "# save the figure before we show it... or it will be blank\n",
    "fig.savefig(\"FECO2-VCO2-3.png\", dpi=300, bbox_inches = \"tight\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b5cb4fd",
   "metadata": {
    "papermill": {
     "duration": 0.006871,
     "end_time": "2025-03-25T19:24:31.988068",
     "exception": false,
     "start_time": "2025-03-25T19:24:31.981197",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### We can put this all together now in one code block that does everything...\n",
    "\n",
    "We have built up each part seperatly in the code above to make sure that all parts of our code should and do work.  Now that we know everything works we can take the next step of putting it together in one code block so we don't run into coherence problems (running things out of order).  We will run everything in one block now, this is a self contained python file and you could turn it into a .py file and run it from the command line and if your path to the datafile was accurate it would run and save the image file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "73132f2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-25T19:24:32.005096Z",
     "iopub.status.busy": "2025-03-25T19:24:32.004064Z",
     "iopub.status.idle": "2025-03-25T19:24:33.158761Z",
     "shell.execute_reply": "2025-03-25T19:24:33.157555Z"
    },
    "papermill": {
     "duration": 1.165966,
     "end_time": "2025-03-25T19:24:33.161244",
     "exception": false,
     "start_time": "2025-03-25T19:24:31.995278",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA64AAANBCAYAAADgFOMlAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/NK7nSAAAACXBIWXMAAA9hAAAPYQGoP6dpAACJ0UlEQVR4nOzde3yT5f3/8XeaUkAORY62TbWADhXBA+iEr9EiEyf+XF2sTvEAnpmoreh0eJgy53DOQ0Gd6DyLoBuNznl2G8UqqCCgqIhOi7RZkJO2U6SF9P79cS+ladM2aZPcd5LX8/HoI+a6rztcgbXrO9d1fS6HYRiGAAAAAACwqQyrBwAAAAAAQHsIrgAAAAAAWyO4AgAAAABsjeAKAAAAALA1gisAAAAAwNYIrgAAAAAAWyO4AgAAAABsjeAKAAAAALC1tAuuhmGorq5OhmFYPRQAAAAAQAQyrR5Aov33v/9Vdna2amtr1bdvX6uHA9jSMtcyNfgalJWXpfE1460eDpCWXMuWydfQoLysLNWM5/sQAJDe0m7GFQAAAACQXAiuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1tKuqjAAAEBzhmFo9+7dCgQCVg8lrXTr1k1Op9PqYQBIEgRXAACQthoaGuT3+7Vjxw6rh5J2HA6HXC6XevfubfVQACQBgisAAEhLjY2NqqqqktPpVG5urrKysuRwOKweVlowDENbtmxRTU2NDjjgAGZeAXSI4AoAANJSQ0ODGhsblZ+fr7322svq4aSdQYMGacOGDdq1axfBFUCHKM4EAADSWkYGvw5ZgdltANHgJzUAAAAAwNZYKgwAQCIFAlJlpeT3Szk5ktstsUwSAIB2EVwBAEgUr1cqKZFqava0uVzS3LmSx2PduNB1fCABAHHFUmEAABLB65WKi0NDqyT5fGa712vNuNB1Xq9UUCBNmCBNmWI+FhTE9d902rRpcjgcrb7+/e9/t3ntpz/9achrrF69WqeffrqGDBmiHj166Ec/+pEuvvhiffbZZyH9nnjiCR111FHq1auX+vTpo2OPPVYvvvhiSJ+KigoVFRUpJydHvXr10mGHHaann346bu8fQPohuAIAEG+BgDnTahitrwXbSkvNfkguFn4g8dOf/lR+vz/ka+jQoW1eW7RoUdO9L774oo4++mjV19fr6aef1rp16/TUU08pOztbN910U1O/a665RpdeeqnOOOMMffDBB3rvvffkdrtVVFSk++67r6nfsmXLNHr0aJWXl+vDDz/UBRdcoPPOO09///vf4/b+AaQXlgoDABBvlZWtg01zhiFVV5v9CgsTNix0UUcfSDgc5gcSRUVxWTbcvXt37bPPPlFf27Fjh84//3xNnjxZzz33XFP70KFD9eMf/1jffvutJOmdd97RXXfdpXnz5umKK65o6nfbbbdp586dmjlzpoqKipSfn6/rr78+5M+48sor9dprr+m5557TKaec0sV3CgAWz7jecsstrZaxtPVDNmjp0qUaM2aMevTooWHDhmn+/PkJGi0AAJ3k98e2H+whmg8kbOS1117T1q1bde2114a93q9fP0nSokWL1Lt3b1166aWt+lx99dXatWuXysvL2/xzamtr1b9//5iMGQAsXyo8cuTIkGUsa9eubbNvVVWVJk+eLLfbrdWrV+v666/XlVde2e4PTQAALJeTE9t+sAeLP5B48cUX1bt376av008/vc1rvXv31q233ipJ+vzzzyVJBx54YLuv/9lnn2n48OHKyspqdS03N1fZ2dmt9sMGLV68WCtWrND555/f2bcHACEsXyqcmZnZ4Sxr0Pz587XvvvuqrKxMknTQQQdp5cqVuvPOO3XaaafFcZQAAHSB221WD/b5wi8rdTjM62534sZEFdyus/gDiQkTJuiBBx5oet6rV682r0lqmv00wv1vsBMMw5DD4WjVXlFRoWnTpunPf/6zRo4cGZM/CwAsn3H9/PPPlZubq6FDh+rMM8/Ul19+2Wbf5cuXa9KkSSFtJ554olauXKldu3aFvae+vl51dXUhXwAAJJTTaR55I5khtbng87KyxAVHC6rgpqTgBxJhwpsksz0/P24fSPTq1Uv7779/01dOs4Dc8tr+++/fFFx/9KMfSZI+/fTTdl//Rz/6kb744gs1NDS0uvaf//xHdXV1OuCAA0Laly5dqlNOOUV33323zjvvvK6+RQBoYmlw/fGPf6wnn3xSr732mv785z9r06ZNGj9+vLZt2xa2/6ZNmzRkyJCQtiFDhmj37t3aunVr2HvmzJmj7Ozspq/8/PyYvw8AADrk8UiLF0t5eaHtLpfZnqhzXDmWJ3bs9oFEhCZNmqSBAwfqjjvuCHs9WJzpzDPP1HfffacHH3ywVZ8777xT3bp1C1nxVlFRoZNPPlm33367LrnkkriMHUD6snSp8EknndT036NGjdK4ceM0fPhwPfHEE5o5c2bYe1ouSQkudwm3VEWSZs2aFfJadXV1hFcAgDU8HrPCrFVLdC2ugpuSgh9IlJSEfhjgcpmhNVEfSLRQX1+vTZs2hbRlZmZq4MCB6tWrlx5++GGdfvrp+tnPfqYrr7xS+++/v7Zu3aq//OUv2rhxo5555hmNGzdOJSUl+tWvfqWGhgadeuqp2rVrlxYsWKC5c+eqrKys6XeqYGgtKSnRaaed1vRnZ2VlUaAJQExYvse1uV69emnUqFFNRQNa2meffVr9EN68ebMyMzM1YMCAsPd0795d3bt3j/lYAQAxlE77LZ1O64684Vie+LD6A4kwXn311ZClw5I0YsSIpuXBRUVFWrZsmebMmaMpU6Y0fbB//PHH63e/+13TPWVlZRo9erQeeOAB3XTTTXI4HDriiCP0/PPPhxxz8/jjj2vHjh2aM2eO5syZ09R+3HHHqaKiIr5vFkBasFVwra+v17p16+RuYy/IuHHjWh1k/frrr2vs2LHq1q1bIoYIAIg1rzf8bNXcuZbNVqWseFXBTacPHtqS4A8kHn/88XavtXc9aOzYsRGdzHDBBRfoggsu6HA8kfyZANBZlu5xveaaa7R06VJVVVXp3XffVXFxserq6jR16lRJ5jLf5hv7p0+frq+++kozZ87UunXr9Oijj+qRRx7RNddcY9VbAAB0BfstEyseVXAp9AQASABLg2tNTY3OOussjRgxQh6PR1lZWXrnnXe03377SZL8fr82btzY1H/o0KF6+eWXVVFRocMOO0y33nqr5s2bx1E4AJCMOtpvKZn7LQOBhA4roQIBqaJCWrTIfIz3e411FVw+eAAAJIilS4WfeeaZdq+HW3Jy3HHHadWqVXEaEQAgYdJ9v6UVS6SDVXCLi82Q2vxDg2ir4FLoCQCQQJaf4woASFPx2m+ZDKycqYzVsTzRfPAAAEAX2ao4EwAgjcRjv2UyiHCmMuPpp+M3hlhUwU2hDx6McP8WiDv+3gFEg+AKALBGcL+lzxc+xDkc5vVI91smiwhnKn/8wQeqPuSQ+I2jq1VwU+CDh+CJBDt27FDPnj0tHk36aWhokCQ5WUoOIAIEVwCANWK53zKZRDgDOXjbtjgPpItS4IMHp9Opfv36afPmzZKkvfbaS462ClchphobG7Vlyxbttddeyszk11EAHeMnBQDAOsH9luGKFJWVpeY5rhHOQG4eMCDOA+miFPngYZ999pGkpvCKxMnIyNC+++7LhwUAIkJwBQBYKxb7LZNJhDOV7x56qP2PAkqBDx4cDodycnI0ePBg7dq1y+rhpJWsrCxlZFAnFEBkCK4AkOoCAfuHwq7ut0wmEc5UNjqd9g+uUsp88OB0OtlrCQA2xsdcAJDKvF6poECaMEGaMsV8LCiI73Er6FisjqSxi+AHD2edZT4SAAEAMcaMKwCkquBZoS2XowbPCk3GgJRKUmSmEgCARCC4AkAqivCsUBUVEZSslE5LpAEA6AKWCgNAKorwrFBVViZuTKkiEJAqKqRFi8zHZNiHCgBAkmPGFQBSUYRnhUbcDyavN3wF3blzWXYNAEAcMeMKAKkowrNCI+6HPXuGW85kB/cMU/AKAIC4IbgCQCoKnhUaPF6lJYdDys83+6FjHe0Zlsw9wywbBgAgLgiuAJCKgmeFSq3Da7OzQmNWmKkz+z6Taa9ouu0ZTqZ/GwBAWiC4AkC8WRUCEnVWaGfOik2282XTac9wsv3bAADSAsEVAOLJ6hDg8UgbNkhLlkgLF5qPVVWxDa3R7vtMxr2i6bJnOBn/bQAAacFhGOE27KSuuro6ZWdnq7a2Vn379rV6OIAtLXMtU4OvQVl5WRpfM97q4SSvYAho+WM2uFQ3lrOeVggEzBDe1hJah8Oc3a2q2rMkuTP32EFw3D5f+H2ucRi3a9ky+RoalJeVpZrxCfg+TNZ/GwBAWmDGFQDiIR2K+XRm32ey7hVN9J5hKyTrvw0AIC0QXAEgHtIhBHRm32cy7xVN1J5hqyTzvw0AIOVlWj0AAEhJqRwCAgEzcH/ySWT9m+/7TPa9oh6PVFRkvn+/3xyn253cM61Byf5vAwBIaQRXAIiHVA0BXq+5BLq92eSg4J7I5mfFBs+X7WivqJ3Pl3U6pcJCq0cRe6nwbwMASFksFQaAeAiGgJb7IYMcDik/P7lCQFsVZ8Npa99nOuwVTVb82wAAbIzgCgDxkGohoL1iU+G0t+8z1feKJjP+bQAANsVSYQCIl2AIaLm01uUyQ2syhYCOik0F3XijNHFix/s+E7lXNLgnN9Z/Trxe12qpvI8XAJC0CK4AEE+pEgIiLSJ18MGR7/9MxF7RcHtyXS5zNrwrHxzE63XtIlX38QIAkhbBFQDiLRVCQDIWmwruyW25vLmmRjrtNKm8vHMhs63X9fnMdpbUAgAQc+xxBQB0LNmKTUWyJ/eSS8x+sXrdYFtpafSvCwAA2kVwBQDsEQhIFRXSokXmYzCAJVuxqUj25G7bJt12W2xf1zCk6mqzHwAAiBmCKwDA5PVKBQXShAnSlCnmY0GB2S4lV8XZSPfkzpsX3exopK8baT8AABAR9rgCQCrpbKXbSPdtJkuxqUj32m7bZr6XSPcgR7PXN1WrDgMAYAFmXAEgVXQ0Y9qWaPdtBotNnXWW+WjHMOZ2S/37R9Y3mtnRSPf6btnSuX8LAEiwjRs3qnfv3lq7dq3VQwHaRXAFgFQQnDFtuf8yOGPaXmBKxX2bTqcZxiMRTSXkSPb6nnmm9ItfdO7fAgASLDc3V2vWrNGIESOsHgrQLoIrACS7rla6TdV9mzfcIA0Y0Pb1zlZCbm+v71/+Yha2ouowgCSRmZmp/fffX1lZWVYPBWgXwRUAkl2kM6YVFeGvJ+MZrZFwOqWHHgq/rLerlZA9HmnDBmnJEmnhQvOxqkoaODD1Zq8BALABgisAJLtIZ0LPOCP8MtVkO6M1GsHZUZcrtD0WlZDD7fVN1dlrAEhD27Zt0+DBg7Vhwwarh9Kh4uJi3X333VYPQ5JUWFio0tLSmL8uwRUAkl2kM6Hbt4ffY5lsZ7RGq63Z0Xgc35Oqs9epoK0zioE0NHr0aN18881hr/3+97/X3nvvrS1btkiS1qxZozPPPFP77LOPsrKyNHz4cN1yyy3atWtXIodsiTlz5uiUU05RQUFB0/MjjzxSffr00eDBg3Xqqadq/fr1bd5fUFAgh8PR6mvGjBlR9dm9e7duvPFGDR06VD179tSwYcP029/+Vo2NjU19fvOb3+i2225TXV1dm+OZNm2aTj311A7f97Rp0/TrX/+6w35t8Xq9uvXWWzt9f1sIrgCQ7DqaMW0p3B7LZDqjtTMSVQk5lWevk1lnK24DKWr06NFhqwhv2rRJc+bM0ezZszVo0CA99thjOuqoozRkyBC9+OKLWrdunW666SbNmzdP06ZNS/zAE+iHH37QI488oosuuqipbenSpZoxY4beeecdvfHGG9q9e7cmTZqk77//PuxrrFixQn6/v+nrjTfekCSdfvrpUfX5wx/+oPnz5+u+++7TunXrdMcdd+iPf/yj7r333qY+o0ePVkFBgZ5++ukuve/Gxka99NJLKioq6vRr9O/fX3369OnSOMIy0kxtba0hyaitrbV6KIBtvZ33trFES4y38962eiiIVHm5YTgchmHuouz4a8mS8K+ze7d5beFC83H37gS+iRQR/Ldo+e8RbCsvj+hl8t5+29CSJUbe23wfdklb3xtR/nsAqeT22283DjjggFbt559/vjFy5Ehj165dxpIlS4yMjAzj8ccfb9Xv4YcfNiQZ69at6/DPqqqqMiQZ5eXlhtvtNnr06GEcccQRRlVVlbFkyRLjyCOPNHr27GkUFhYa27Zta7pv9uzZxiGHHGLstddexuDBg43p06cbDQ0NTdcXLlxodO/e3aipqWlqu/DCC41Ro0YZ3377bbR/Ja2Ul5cbAwcObLfP5s2bDUnG0qVLI3rNkpISY/jw4UZjY2NUfU4++WTjggsuCOnn8XiMc845J6TtlltuMdxud5uvPXXqVKOoqKjdMb755pvG4MGDjUAgYBiGYRx33HHG5ZdfbpSUlBj9+vUzBg8ebDz44IPGd999Z0ybNs3o3bu3MWzYMOPll19ueo3jjjvOKCkpCXl+xRVXGL/61a+Mvffe2xgyZIhx8803tzuOcJhxBYBUEJwx7erZpclwRqvdpfrsdTLpasVtIEWNGjVKX3zxhX744YemttWrV+uJJ57QvHnzlJmZqZKSEp100kmaOnVqq/snTJggSfrggw86/LPWrFkjSfrTn/6k3//+91q+fLm2bdumc889V3/4wx90//33q6KiQmvXrtUjjzwiSTIMQ4FAQA8++KA++eQTPf7441q8eLEefvjhptc988wzNWLECM2ZM0eSNHv2bL322mt65ZVXlJ2d3Wocv//979W7d+92vyqbFc578803NXbs2HbfW21trSRzhrEjDQ0NWrBggS644AI52liV01afY445Rv/85z/12WefSTL/3t966y1Nnjw55P6jjjpK7733nurr6zscT1teeOEFnXLKKcrI2BMTn3jiCQ0cOFDvvfeerrjiCv3yl7/U6aefrvHjx2vVqlU68cQTde6552rHjh1tvu4TTzyhXr166d1339Udd9yh3/72t02zy5HK7PS7AgDYi8cjZWdLP/lJx33ZYxlfHo9UVGRWD/b7zb9vt5sPAhItmjOKCwsTNizAaqNGjVJjY6PWrVunI444QpJUWlqqn//85zr++OO1evVqffjhh7r99tvD3h8MvJEcofPBBx9o77331jPPPKOBAwdKMoPvv/71L33yySfq1auXJOnII4/Upk2bJEkOh0OzZ89ueo399ttPJ5xwgj799NOmNofDodtuu03FxcXKzc3V3LlzVVlZqbyWHxr+z/Tp03XGGWe0O9bm927YsEG5ublt9jUMQzNnztQxxxyjQw45pIO/Ben555/Xt99+2+4S67b6XHfddaqtrdWBBx4op9OpQCCg2267TWeddVar8dfX12vTpk3ab7/9OhxTOC+88ILuvPPOkLZDDz1UN954oyRp1qxZuv322zVw4EBdfPHFksz9tQ888IA+/PBDHX300WFft/m+6gMOOED33Xef/vnPf+qEE06IeGwEVwBIJYWF5syezxd+lsnhMK+zxzL+grPXsA5VnoGw8vPz1a9fP61du1ZHHHGEFi9erBUrVmjdunWSzNlXSTrssMPC3r9q1aqm69XV1Tr33HO1efNmZWZm6qabbgrZn7lmzRr97Gc/awqtkrRx40adddZZTaE12HbyySdLkr766iv98Y9/VEVFhXw+n3bt2qWdO3c2za4G/b//9/908MEHa/bs2Xr99dc1cuTINt9z//79I5oZDfrhhx/Uo0ePNq9ffvnl+vDDD/XWW29F9HqPPPKITjrppHbDcFt9nn32WS1YsEALFy7UyJEjtWbNGpWWlio3NzdkRrxnz56S1O7MZ3vWrVunmpoa/aTFB+CjR49u+m+n06kBAwZo1KhRTW1DhgyRJG3evLnN127+GpKUk5PTbv9wWCoMAKkk1SsEA9GgyjPQplGjRumjjz5SfX29rr32Wl177bVNs3TBisFtBbf7779fbrdbQ4cOVWZmpsrKyvTJJ5/oH//4h6666qqQYkUffPBBq1m4NWvW6Mc//nHT8507d+qzzz7TYYcdpq1bt+qoo47S1q1bdffdd+utt97S8uXL5XQ6WwXp1157TZ9++qkCgUBTeGpLtEuFBw4cqG+++Sbsa11xxRV64YUXtGTJErlaHrcWxldffaV//OMfIYWeounzq1/9Sr/+9a915plnatSoUTr33HN11VVXtQry27dvlyQNGjSowzGF88ILL+iEE05oCsBB3bp1C3nucDhC2oLLmptXOW4p3Gu01z8cZlwBINUE91iWlIQuk3S5zNDKHkuki2CVZ1YgAK0Eg+vdd9+tQCCg6667runa4YcfLsmsotvy+JS77rpLa9as0fLlyyWZM2c5//vwZ/Dgwerfv7+2b9+uXr16qa6uThs2bGh6PckMaNu3bw9p+/jjjxUIBHTooYfqueee0+7du7Vo0aKmQHT//feroaEhJLiuWrVKp59+uh588EE988wzuummm/TXv/61zfcb7VLhww8/XAsWLAi5bhiGrrjiCj333HOqqKjQ0KFD2329oMcee0yDBw9umlGOts+OHTtC9pxK5sxny+D30UcfyeVyhcxuR+Nvf/tbu+HaagRXAEhF7LEE9qxAKC42Q2rz8MoKBKS5UaNG6S9/+YvefvttPfrooyGzbEcddZR++tOfasaMGdq1a5fGjh2rr7/+Wg8//LAWLFigZ599NiR4Bq1cuVKNjY3Kz8+XZM62ZmRkhCwTXbNmjfr169d0Nmqw37Bhw9SnTx/1799fdXV1euGFF3TwwQfr73//u+bMmaO8vLymmcQNGzbo5JNP1q9//Wude+65Ovjgg3XkkUfq/fff15gxY8K+32iXCp944omaNWuWvvnmG+29996SpBkzZmjhwoX629/+pj59+jTtyc3Ozm76+7vvvvv03HPP6Z///Kckcxbyscce09SpU5WZGT56ddTnlFNO0W233aZ9991XI0eO1OrVq3X33XfrggsuCOlXWVmpSZMmtfu+amtrmwpmBfXv3189evTQihUr9Pzzz3f4d2MVgisApCr2WAKsQADaMGrUKG3dulUTJkxQcXFxq+vl5eW6+eabdfXVV2vTpk0aOHCgjj/+eK1Zs0YHHnhgq/7btm3TeeedF1L594MPPtCBBx4YEopXr16tQw89NOTeDz74oGk29eSTT9aFF16oc889Vz179tQ555yjM844Q1999ZUkcznsSSedpJ/97Ge6/vrrJUljxozRKaecohtuuEGvvvpql/9uJPPvZ+zYsfrLX/6iSy+9VJL0wAMPSJIKW/x/62OPPdZUUGnr1q364osvmq794x//0MaNG1uFzOY66nPvvffqpptu0mWXXabNmzcrNzdXl156qX7zm9809dm5c6eee+45vfbaa+2+r4qKilYfOkydOlVut1s//vGPNXjw4Hbvt5LDMMKtnUlddXV1ys7OVm1trfr27Wv1cABbWuZapgZfg7LysjS+ZrzVwwHSkmvZ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NGTIkJC2IUOGaPfu3dq6dWvYe+bMmaPs7Oymr/z8/C6PG4grr1cqKJAmTJCmTDEfCwrMdgAAACANWRZcq6urVVJSogULFqhHjx4R3+dwOEKeG4YRtj1o1qxZqq2tbfqqrq7u/KCBePN6peJiqaYmtN3nM9sJrwAAAEhDlp3j+v7772vz5s0aM2ZMU1sgENCbb76p++67T/X19XI6nSH37LPPPtq0aVNI2+bNm5WZmakBAwaE/XO6d++u7t27x/4NALEWCEglJdL/PowJYRiSwyGVlkpFReYZsAAAAECasCy4Tpw4UWvXrg1pO//883XggQfquuuuaxVaJWncuHH6+9//HtL2+uuva+zYserWrVtcxwvEXWVl65nW5gxDqq42+xUWJmxYAAAAgNUsC659+vTRIYccEtLWq1cvDRgwoKl91qxZ8vl8evLJJyVJ06dP13333aeZM2fq4osv1vLly/XII49o0aJFCR8/EHN+f2z7AQAAACmiy8F169atevfddxUIBHTkkUcqJycnFuOSJPn9fm3cuLHp+dChQ/Xyyy/rqquu0v3336/c3FzNmzdPp512Wsz+TMAykX7vxPB7DAAAAEgGDsMIt6EuMuXl5brwwgv1ox/9SLt27dL69et1//336/zzz4/lGGOqrq5O2dnZqq2tVd++fa0eDrBHIGBWD/b5wu9zdTgkl0uqqor7HtdlrmVq8DUoKy9L42vGx/XPAhCea9ky+RoalJeVpZrxfB8CANJbVFWFv/vuu5Dns2fP1nvvvaf33ntPq1ev1l//+lfdcMMNMR0gkDacTmnuXPO/W1bJDj4vK6MwEwAAANJOVMF1zJgx+tvf/tb0PDMzU5s3b256/vXXXysrKyt2owPSjccjLV4s5eWFtrtcZrvHY824AAAAAAtFtcf1tdde02WXXabHH39c999/v+bOnatf/OIXCgQC2r17tzIyMvT444/HaahAmvB4zCNvKivNQkw5OZLbzUwrAAAA0lZUwbWgoEAvv/yyFi5cqOOOO04lJSX697//rX//+98KBAI68MAD1aNHj3iNFUgfTidH3gAAAAD/E9VS4aApU6Y07WstLCxUY2OjDjvsMEIrAAAAACDmoj4O55VXXtEnn3yiQw89VI888ogqKio0ZcoUTZ48Wb/97W/Vs2fPeIwTAAAAAJCmoppxvfbaazVt2jStWLFCl156qW699VYVFhZq9erV6t69uw477DC98sor8RorAAAAACANRRVcH330Ub388st65plntGLFCj311FOSpKysLP3ud7+T1+vVbbfdFpeBAgAAAADSU1TBda+99lJVVZUkqbq6utWe1pEjR+qtt96K3egAAAAAAGkvquA6Z84cnXfeecrNzdVxxx2nW2+9NV7jAgAAAABAUpTFmc4++2z99Kc/1ZdffqkDDjhA/fr1i9OwAAAAAAAwRV1VeMCAARowYEA8xgIAAAAAQCudOscVAAAAAIBEIbgCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1jKtHgAQV4GAVFkp+f1STo7kdktOp9WjAgAAABAFgitSl9crlZRINTV72lwuae5cyeOxblwAAAAAosJSYaQmr1cqLg4NrZLk85ntXq814wIAAAAQNYIrUk8gYM60Gkbra8G20lKzHwAAAADbI7gi9VRWtp5pbc4wpOpqsx8AAAAA2yO4IvX4/bHtBwAAAMBSBFeknpyc2PYDAAAAYCmCK1KP221WD3Y4wl93OKT8fLMfAAAAANsjuCL1OJ3mkTdS6/AafF5WxnmuAAAAQJIguCI1eTzS4sVSXl5ou8tltnOOKwAAAJA0Mq0eABA3Ho9UVGRWD/b7zT2tbjczrQAAAECSIbgitTmdUmGh1aNAO3bX7pb/Yb+2vbhN33/0vXbX7pazr1NZg7PU+/De6v/T/hp81mBlZGZodeFq1S6tbfO1BhQN0KjnR3XYr7n9bt5PQ28ZGqu3AySVW6qqNPurr0LanJL6d+umsX36qNTl0qT+/Vvd9+n33+v+//xHS775Rl/V1ytgGMrNytJhvXvrF4MH6/TBg9t8fUnq43RqZK9emjpkiC7JzVVGWzUJAAD4H4IrAMvULq/Vx6d/rAZfQ0j77m27tXvbbu1Yt0ObF25W/5P6K2tglkWjBNJLQNKWXbv0yvbtenX7dr1wyCH6fwMHNl0vq67Wr778UrsNI+S+L3bu1Bc7d+of33zTFFzb8t9AQO/U1emdujotra3VooMPjsdbAQCkEIIrAEv88OUP+vCkDxWoDUiSso/L1tDZQ9XnyD5ShrRzw059W/Gtvn7i67D3j3hshHKmhT/S6PCKw0OeN5+Bbe8+IJ1NHTJEjx90kL5uaNC0Tz/Vq9u3y5A0z+drCq6Lvv5aV33xRdM91+Tna0ZurvK6d9emhga9un27/tzGGdnB198ZCOjpzZt10fr1kqRnNm/WjNxcHdOvX7zfIgAgiVGcCYAlNty8oSm09jmyjw5941D1O66fnHs55ezhVK8Deylvep6OWH4Es61AAg3JytIvc3Obnn+1c6ckqdEwdO2XXza1T8/N1R+HD1dBz57qlpGh/B49dHFurpYdfnir12yuh9OpC3NydEivXk1t79TVxfhdAABSDcEVQMIZjYa2/n1r0/P8q/OV0Y0fR4BdNF8EPDjL/OBo1X//q5r6+qb26/fdN+y9mRmRfS8bLZYaAwDQHpYKA0i4Xdt2Nc22SlKv0XtmXv7z8H/02cWfhfTPvy5fw28fHtK2/vz1Wn/++pA2lgEDXfd1Q4Me8Pmanp87ZIgkqep/M6+SWVwpv0ePTr3+zkBAC77+Wh/v2NHUNi47u5OjBQCkC4IrgMRrMdHSuLPRmnEAaPLE11/ria/37Cnv7XRq1r776pL/LRtu/m3bmRrALV8/6IxBg/R/BFcAQAcIrgASrtvAbnL2dSpQZ8667vhkh/oc3keSlHtRrnIvylXVLVX6anbrYzSCmF0F4itgGPousGdlxPCePZv+uy4QUM3OnXJ1cta1t9Opg/faS+cOGaJf5uV1eawAgNTHpjIACefIcGjAKQOanm+8Y6OMAPvdACtNHTJEu487Tm8dfriGdOumHxobNWfjRt1XUyNJOrx3b+V3797Uf87GjWFfZ3dj+BUUU4cMkVFYKKOwUP91u/XumDG63OWSkzNcAQARILgCsETBLQVy9nFKkr7/8Hut/dla1a2sU2N9o3bX7lZ9TX0HrwAg1pwOh/4vO1vzf/SjprYbq6q0taFBGQ6H7hg2rKn9gf/8R9d98YW+2rlTuxsbVbNzp/78n/9o3OrVVgwdAJDiLA2uDzzwgEaPHq2+ffuqb9++GjdunF555ZU2+1dUVMjhcLT6+vTTTxM4agCxsNf+e2nUi6PUbXA3SdL2l7dr1ZGr9GaPN/VWv7e06ZFN7d6//vz1qnBUhHwtL1ieiKEDKe/UQYNU+L9zVWsDAd2yYYMk6cwhQ3TP8OHKdDhkSLqjuloF77yjbm++qfx33tEln32mz5sVXQIAIFYs3ePqcrl0++23a//995ckPfHEEyoqKtLq1as1cuTINu9bv369+vbt2/R80KBBcR8rgNjrd2w/HfXJUfrPg//Rthe3ace6HQp8H1C3Ad2UtU+Weh/WWwN+NkD9J/W3eqhA2rlr+HCNff99GZIe9Pt1eV6eDuzVS6X5+Tqxf3/96T//0b+++UZf7dypgKTcrCwd1ru3fjF4sNVDBwCkIIdhs4PU+vfvrz/+8Y+68MILW12rqKjQhAkT9M0336jf/z4JjlZdXZ2ys7NVW1sbEn4B7LHMtUwNvgZl5WVpfM14q4cDpCXXsmXyNTQoLytLNeP5PgQApDfb7HENBAJ65pln9P3332vcuHHt9j388MOVk5OjiRMnasmSJQkaIQAAAADACpYfh7N27VqNGzdOO3fuVO/evfXcc8/p4IMPDts3JydHDz30kMaMGaP6+no99dRTmjhxoioqKnTssceGvae+vl719XuKvNTV1cXlfQAAAAAA4sPy4DpixAitWbNG3377rcrLyzV16lQtXbo0bHgdMWKERowY0fR83Lhxqq6u1p133tlmcJ0zZ45mz54dt/EDAAAAAOLL8qXCWVlZ2n///TV27FjNmTNHhx56qObOnRvx/UcffbQ+//zzNq/PmjVLtbW1TV/V1dWxGDYAAAAAIEEsn3FtyTCMkKW9HVm9erVycnLavN69e3d1b3ZgOgAAAAAguVgaXK+//nqddNJJys/P13//+18988wzqqio0KuvvirJnC31+Xx68sknJUllZWUqKCjQyJEj1dDQoAULFqi8vFzl5eVWvg0AAAAAQBxZGly//vprnXvuufL7/crOztbo0aP16quv6oQTTpAk+f1+bdy4sal/Q0ODrrnmGvl8PvXs2VMjR47USy+9pMmTJ1v1FgAAAAAAcWa7c1zjjXNcgY5xjitgPc5xBQBgD8uLMwEAAAAA0B6CKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABbI7gCAAAAAGyN4AoAAAAAsDWCKwAAAADA1giuAAAAAABby7R6ALCxQECqrJT8fiknR3K7JafT6lEBAAAASDMEV4Tn9UolJVJNzZ42l0uaO1fyeKwbFwAAAIC0w1JhtOb1SsXFoaFVknw+s93rtWZcAAAAANISwRWhAgFzptUwWl8LtpWWmv0AAAAAIAEIrghVWdl6prU5w5Cqq81+AAAAAJAABFeE8vtj2w8AAAAAuojgilA5ObHtBwAAAABdRHBFKLfbrB7scIS/7nBI+flmPwAAAABIAIIrQjmd5pE3UuvwGnxeVsZ5rgAAAAAShuCK1jweafFiKS8vtN3lMts5xxUAAABAAmVaPQDYlMcjFRWZ1YP9fnNPq9vNTCsAAACAhLN0xvWBBx7Q6NGj1bdvX/Xt21fjxo3TK6+80u49S5cu1ZgxY9SjRw8NGzZM8+fPT9Bo05DTKRUWSmedZT4SWgEAAABYwNLg6nK5dPvtt2vlypVauXKljj/+eBUVFenjjz8O27+qqkqTJ0+W2+3W6tWrdf311+vKK69UeXl5gkcOAAAAAEgUS5cKn3LKKSHPb7vtNj3wwAN65513NHLkyFb958+fr3333VdlZWWSpIMOOkgrV67UnXfeqdNOOy0RQ+68QIBltwAAAADQCbYpzhQIBPTMM8/o+++/17hx48L2Wb58uSZNmhTSduKJJ2rlypXatWtX2Hvq6+tVV1cX8pVwXq9UUCBNmCBNmWI+FhSY7QAAAACAdlkeXNeuXavevXure/fumj59up577jkdfPDBYftu2rRJQ4YMCWkbMmSIdu/era1bt4a9Z86cOcrOzm76ys/Pj/l7aJfXKxUXSzU1oe0+n9nu9ZqzsRUV0qJF5mMgkNgxAgAAAICNWR5cR4wYoTVr1uidd97RL3/5S02dOlWffPJJm/0dLc4WNQwjbHvQrFmzVFtb2/RVXV0du8F3JBCQSkqk/40xRLDtkkuk/fZjNhYAAAAA2mD5cThZWVnaf//9JUljx47VihUrNHfuXD344IOt+u6zzz7atGlTSNvmzZuVmZmpAQMGhH397t27q3v37rEfeCQqK1vPtDZnGNK2ba3bg7OxnJkKAAAAANbPuLZkGIbq6+vDXhs3bpzeeOONkLbXX39dY8eOVbdu3RIxvOj4/Z27LzgbW1rKsmEAAAAAac/S4Hr99dersrJSGzZs0Nq1a3XDDTeooqJCZ599tiRzme95553X1H/69On66quvNHPmTK1bt06PPvqoHnnkEV1zzTVWvYX2ff555+81DKm62py1BQAAAIA0ZulS4a+//lrnnnuu/H6/srOzNXr0aL366qs64YQTJEl+v18bN25s6j906FC9/PLLuuqqq3T//fcrNzdX8+bNs+dROF6vdPPNXX+dzs7aAgAAAECKsDS4PvLII+1ef/zxx1u1HXfccVq1alWcRhQjwaJMsZCTE5vXAQAAAIAkZbs9rimho6JMQX37Sm1UQ5bDIeXnS253bMcGAAAAAEmG4BoPkS7vveAC87FleA0+LyuTnM6YDQsAAAAAkhHBNR4iXd5bVGQeeZOXF9rucnEUDgAAAAD8j+XnuKYkt9sMnz7fnqNtmnM4zOtutzmjWlRkLi/2+83QG2wHAAAAABBc48LplObOlYqLzZDaPLyGWwbsdEqFhYkeJQAAAAAkBZYKx4vHwzJgAAAAAIgBZlzjyeNhGTAAAAAAdBHBNd5YBgwAAAAAXcJSYQAAAACArRFcAQAAAAC2RnAFAAAAANgawRUAAAAAYGsUZ4q3QICqwgAAAADQBQTXePJ6pZISqaZmT5vLJc2dyzmuAAAAABAhlgrHi9crFReHhlZJ8vnMdq/XmnEBAAAAQJIhuMZDIGDOtBpG62vBttJSsx8AAAAAoF0E13iorGw909qcYUjV1WY/AAAAAEC7CK7x4PfHth8AAAAApDGCazzk5MS2HwAAAACkMYJrPLjdZvVghyP8dYdDys83+wEAAAAA2kVwjQen0zzyRmodXoPPy8o4zxUAAAAAIkBwjRePR1q8WMrLC213ucx2znEFAAAAgIhkWj2AlObxSEVFZvVgv9/c0+p2M9MKAAAAAFEguMab0ykVFlo9CgAAAABIWiwVBgAAAADYGsEVAAAAAGBrBFcAAAAAgK0RXAEAAAAAtkZwBQAAAADYGsEVAAAAAGBrBFcAAAAAgK0RXAEAAAAAtkZwBQAAAADYGsEVAAAAAGBrmVYPINEaGxslSbW1tRaPBLCv7xu/V4MatKtxl+rq6qweDpCWGr//XmpoUOMuvg+Rvvr06SOHw2H1MADYQNoFV7/fL0nKzs5W3759LR4NYE+9Mnqpm7opKyOL7xPAIhm9eknduikji+9DpCeHw6Ha2lr+9w9AUhouFc7JybF6CAAAAOhAbW2t+vTpY/UwANhE2s24ZmSkXVYHAABIOsy0AmiOFAcAAAAAsDWCKwAAAADA1giuAAAAAABbS7s9rpEwDEO7d+9WIBCweigpw+l0KjMzk5L2AAAAAKJGcG2hoaFBfr9fO3bssHooKWevvfZSTk6OsrKyrB4KAAAAgCRCcG2msbFRVVVVcjqdys3NVVZWFjOEMWAYhhoaGrRlyxZVVVXpgAMOoLozAAAAgIgRXJtpaGhQY2Oj8vPztddee1k9nJTSs2dPdevWTV999ZUaGhrUo0cPq4cEAAAAIEkw7RUGs4Hxwd8rAAAAgM4gSQAAAAAAbI2lwgAAAGhTICBVVkp+v5STI7ndktNp9agApBtmXFPUxo0b1bt3b61du9bqoQAAgCTl9UoFBdKECdKUKeZjQYHZDgCJRHBNUbm5uVqzZo1GjBhh9VAAAEAS8nql4mKppia03ecz2wmvABKJ4JqiMjMztf/++3NmKgAAiFogIJWUSIbR+lqwrbTU7AcAiUBwBQAAQIjKytYzrc0ZhlRdbfYDgEQguAIAACCE3x/bfgDQVQTXFDJ69GjdfPPNYa/9/ve/1957760tW7ZIkt5//32deeaZys3NVY8ePTR8+HBdcMEF+uyzz0LuW7Nmjc4880zts88+ysrK0vDhw3XLLbdo165dcX8/AADAGjk5se0HAF1FcI2TQECqqJAWLTIfE7EHZPTo0WGrCG/atElz5szR7NmzNWjQID388MP68Y9/rOzsbHm9Xq1fv15//vOftX37dj3yyCNN9z322GM66qijNGTIEL344otat26dbrrpJs2bN0/Tpk2L/xsCAACWcLsll0tyOMJfdzik/HyzHwAkAue4xoHXaxY0aL43xOWS5s6VPJ74/bmjRo0KCZ5B119/vfbbbz9ddtlleuutt3TppZfqvvvu0y9/+cumPvvtt5+OP/54bd++XZJUUVGhiy66SI8++qimTp3a1G/48OEKBAK66KKLdNNNN+nAAw+M3xsCAACWcDrN31uKi82Q2rxIUzDMlpVxniuAxGHGNcasLB0/atQoffHFF/rhhx+a2lavXq0nnnhC8+bNU2ZmpmbOnKnjjjsuJLQ2179/f0lSSUmJTjrppJDQGjRhwgRJ0gcffBCHdwEAAOzA45EWL5by8kLbXS6zPZ4fxgNASwTXGLK6dPyoUaPU2NiodevWNbWVlpbq5z//uY4//nitW7dOK1as0IwZM9p9ndWrV+vDDz9ss18wGHPUDgAAqc3jkTZskJYskRYuNB+rqgitABKP4BpDVpeOz8/PV79+/Zr2uS5evFgrVqzQXXfdJUlatWqVJGnMmDHtvs7q1aslSYcddljY68HXOeyww1RdXa3CwkIdfPDBGj16tP7617/G4q0AAACbcDqlwkLprLPMR5YHA7ACe1xjyA6l40eNGqWPPvpI9fX1uvbaa3Xttddqv/32kyTt2LFDktS7d+92XyNYMbhHjx5hr99///1yu90aOnSo/H6/ysrKdNhhh2nz5s064ogjNHnyZPXq1SuG7woAAABAOmPGNYbsUDo+GFzvvvtuBQIBXXfddU3XDjnkEElSZRtTvsElwIcffrgkaenSpa363HXXXVqzZo3mzp0rScrJyWmamR08eLD69+/fVOAJAAAAAGKBGdcYCpaO9/nC73N1OMzr8SwdP2rUKP3lL3/R22+/rUcffVQ9e/ZsujZu3DhNmjRJl112mb777juNGzdOjY2NWrFihebPn68HHnhAhxxyiI466ij99Kc/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\n",
      "text/plain": [
       "<Figure size 800x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Now all together in one code block that could run independently...\n",
    "# lets take care of importing everything we need at once\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Lets read in our file now\n",
    "df = pd.read_csv('../input/demo-knes381/subject_1321.csv', header=[0], skiprows=[1,2,3])\n",
    "\n",
    "# please note that while this is an output file from the parvo-metabolics cart we have\n",
    "# I have edited this data set and simplied the header file on it\n",
    "\n",
    "# rename our column headers\n",
    "df = df.rename(columns={'VE/': 'VE/VO2','VE/.1': 'VE/VCO2'})\n",
    "\n",
    "# simplify our terms to reduce future typing... \n",
    "# it is easier to write plot x, y than plot df['Time'], df['VO2']\n",
    "x = df['VO2']\n",
    "y = df['FECO2']\n",
    "y1 = df['VCO2']\n",
    "\n",
    "#Find VO2 max value \n",
    "xmax = max(x)\n",
    "\n",
    "# find the x position of the ymax value or where ymax occurs on the x axis\n",
    "ymax = y[x.argmax()]\n",
    "\n",
    "fig, ax = plt.subplots(2, 1, sharex=True, figsize=(8, 10)) # Note I increased the figure size here.\n",
    "\n",
    "# this line seperates the two plots...\n",
    "fig.subplots_adjust(hspace=0)\n",
    "\n",
    "#vert lines for get and rcp\n",
    "get = 1.05\n",
    "rcp = 2.05\n",
    "\n",
    "for a in ax:\n",
    "    a.axvline(get, color = 'm', linestyle='-', linewidth=2)\n",
    "    a.axvline(rcp, color='c', linestyle='-', linewidth=2)\n",
    "\n",
    "#text labels for GET, RCP:\n",
    "ax[0].text(get + 0.1, max(y)*0.7, \"GET\", color='m', fontsize=12, fontweight='bold')\n",
    "ax[0].text(rcp + 0.1, max(y)*0.7, \"RCP\", color='c', fontsize=12, fontweight='bold')\n",
    "\n",
    "\n",
    "\n",
    "# annotate the position of V02 max before plotting the value, we could do this later but why.\n",
    "\n",
    "ax[0].annotate('$\\dot VO_2max$ =({}) L/min'.format(round(xmax, 3)), \n",
    "               xy=(xmax, ymax), xytext=(xmax+.5, ymax+ .5),\n",
    "               arrowprops=dict(facecolor='red', shrink= 0.05),\n",
    "                )\n",
    "\n",
    "ax[0].plot(x, y, 'o', label=('FECO2'), c='r' )\n",
    "# in the line of code below I hide the top and right black bars serrounding the plot for APA format.\n",
    "ax[0].spines[['right', 'top']].set_visible(False)\n",
    "ax[0].set(ylabel=('%'))\n",
    "ax[0].legend()\n",
    "#note all these set features could be added in one line but reading it would be difficult\n",
    "\n",
    "# Second plot of values down from the top\n",
    "ax[1].plot(x, y1, 'o', label=('$\\dot VCO_2$'), c='b')\n",
    "ax[1].spines[['top', 'right']].set_visible(False)\n",
    "ax[1].set(ylabel=('L/min'))\n",
    "ax[1].set(xlabel=('L/min'))\n",
    "ax[1].legend()\n",
    "\n",
    "# save the figure before we show it... or it will be blank\n",
    "fig.savefig(\"FECO2-VCO2-4.png\", dpi=300, bbox_inches = \"tight\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a121f7ce",
   "metadata": {
    "papermill": {
     "duration": 0.007516,
     "end_time": "2025-03-25T19:24:33.176890",
     "exception": false,
     "start_time": "2025-03-25T19:24:33.169374",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Please note that if you change the file path of the datafile in the code block above you create an completely new graph for your new data, all by changing just one line of code...\n",
    "Also I have changed the marker form a line to dots, can you see somthing about the data that was hidden before when it was plotted in lines?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e71065b8",
   "metadata": {
    "papermill": {
     "duration": 0.007719,
     "end_time": "2025-03-25T19:24:33.192463",
     "exception": false,
     "start_time": "2025-03-25T19:24:33.184744",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2952233,
     "sourceId": 5084312,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30407,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.016773,
   "end_time": "2025-03-25T19:24:33.923491",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-25T19:24:18.906718",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
